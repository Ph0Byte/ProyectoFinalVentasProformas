package com.carrito.demo.controller.admin;

import com.carrito.demo.dto.login.LoginDTO;
import com.carrito.demo.dto.login.RecoverAccountDTO;
import com.carrito.demo.dto.login.RegisterDTO;
import com.carrito.demo.model.administration.Usuario;
import com.carrito.demo.service.login.UsuarioService;
import org.antlr.v4.runtime.misc.MultiMap;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.security.auth.login.LoginException;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;


@RestController
@RequestMapping("/login")
@CrossOrigin(origins = "*")// http://localhost:5173
public class LoginController {

    private int codigoRecuperacion = new Random().nextInt();

    @Autowired
    private UsuarioService usuarioService;

    @PostMapping("/ingresar")
    public ResponseEntity<?> loginSistema(@RequestBody LoginDTO request) {
        try {
            Usuario usuario = usuarioService.loginLogearse(request.getUsername(), request.getPassword());
            return ResponseEntity.ok(usuario);
        } catch (LoginException e) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(e.getMessage());
        }
    }

    @PostMapping("/register")
    public ResponseEntity<?> registrarUsuario(
            @RequestBody RegisterDTO registerDTO) {
        try {
            Usuario nuevoUsuario = usuarioService.loginRegistrarse(
                    registerDTO.getUsername(),
                    registerDTO.getPassword(),
                    registerDTO.getRolNombre()
            );
            return ResponseEntity.status(HttpStatus.CREATED).body(nuevoUsuario);
        } catch (LoginException e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());
        }
    }

    @PostMapping("/recovery")
    public ResponseEntity<?> recuperarCuenta(@RequestBody RecoverAccountDTO recoverAccountDTO) {
        try {
            // SI EL CODIGO DE RECUPERACION ES CONRRECTO SE PUEDE
            usuarioService.loginRecuperarCuenta(recoverAccountDTO.getUsername());
            return ResponseEntity.ok("Cuenta recuperada con Ã©xito.");
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());
        }
    }

    // ENVIAR CODIGO DE RECUPERACION
    @GetMapping("/mensaje")
    public ResponseEntity<Map<String, int>> mensajeCualquiera() {
        Map<String, int> mensaje = new MultiMap<>();
        mensaje.put("mensaje", codigoRecuperacion);
        return ResponseEntity.ok(mensaje);
    }
}
